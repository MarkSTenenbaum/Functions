---
title: "Functions"
format: pdf
editor: visual
---

# Functions

Constructing functions is helpful for three reasons. (1) It results in less copying and pasting, (2) it takes up less room, and (3) it limits opportunities for error.

## Some basic examples

```{r}
# Calculate volume of cylinder 
volume_cylinder <- function(r, h){
  pi*r^2*h
}

volume_cylinder(4, 8)


# Formula for z score
z_score <- function(obs, mean, sd){
    z <- (obs-mean)/sd
    print(paste('The Z score of an observation', obs, 'with a mean', mean, 'and a standard deviation', sd, 'is:', z))
}

z_score(25.77, 23.54, 2.442)


# natural log of num times common log of same number divided by cube root of given prime number
log_function <- function(numb, prime){
  x <- (log(numb)*log10(numb))/prime^(1/3)
  x <- round(x, digits = 1)
  x
}

log_function(32, 11)

# If numb is blank, default to 32, otherwise use inputed number 
log_function <- function(numb, prime){
  if(missing(numb)){
    numb = 32
    x <- (log(numb)*log10(numb))/prime^(1/3)
    x <- round(x, digits = 1)
    x
  } else{
    x <- (log(numb)*log10(numb))/prime^(1/3)
    x <- round(x, digits = 1)
    x
  }
}

log_function(prime = 11)

# If a number is prime
isprime <- function(num) {
   if (num == 2) {
      TRUE
   } else if (any(num %% 2:(num-1) == 0)) {
      FALSE
   } else { 
      TRUE
   }
}

# Performing function if second number is prime, otherwise giving me message
log_function <- function(numb, prime){
  if(isprime(prime) == T){
    x <- (log(numb)*log10(numb))/prime^(1/3)
    x <- round(x, digits = 1)
    x
  } else {
     print('That number is not prime')
  }
}
log_function(32, 12)

# Function to calculate SD of column in dataset
output <- vector('double', ncol(mtcars))
for(i in seq_along(mtcars)){
    output[[i]] <- sd(mtcars[[i]])
      
}
output

diamonds <- diamonds %>% drop_na()
output3 <- vector('double', ncol(diamonds)) 
for (i in seq_along(diamonds)) {
  output3[[i]] <- mean(diamonds[[i]])
}
output3

output3 <- vector('double', ncol(diamonds)) 
for (i in seq_along(diamonds)){
  if(is.numeric(diamonds[[i]])) {
    output3[[i]] <- mean(diamonds[[i]])
  } else {
    print('not numeric')
  }
}
output3


# other examples (from a data set)
for (i in colnames(sd18[,87:91])){   
    sd18[[i]][sd18[[i]] == "Don't know"] <- NA   
}

for (i in colnames(sd18[,c(87:91)])){   
    sd18[[i]] <- as.numeric(sd18[[i]])  
}

# another way
multi_return <- function(){
  my_list <- list('color' = 'red', 'size' = 20, 'shape' = 'round')
  return(my_list)
}
a <- multi_return()
a$color

a <- multi_return()
a$shape

a <- multi_return()
a$size
```
